{
    "$schema": "https://raw.githubusercontent.com/cursor-sh/cursor-rules/main/schema/v1.json",
    "language": "typescript",
    "rules": [
      {
        "selectors": ["**/*.ts", "**/*.tsx"],
        "description": "React 기반 TypeScript 프론트엔드 프로젝트 규칙",
        "rules": {
          "architecture": {
            "component_structure": "components/ 하위에는 각 도메인 또는 역할별 디렉토리를 만들고, 하나의 디렉토리에는 관련된 UI/로직을 포함",
            "api_calls": "API 호출은 반드시 config/api.ts 내 정의된 wrapper 함수 사용",
            "state_management": "전역 상태는 필요 시 recoil 또는 zustand를 사용하고, useState 남용 지양"
          },
          "naming": {
            "components": "PascalCase (예: RepositorySelector.tsx)",
            "functions": "camelCase (예: handleSubmit)",
            "variables": "camelCase",
            "constants": "UPPER_SNAKE_CASE"
          },
          "styling": {
            "css_strategy": "TailwindCSS를 기본 사용. 글로벌 스타일은 styles/globals.css에 정의",
            "class_naming": "조건부 클래스 병합은 lib/utils.ts 내 cn 함수 사용"
          },
          "code_quality": {
            "function_length": "하나의 함수는 한 가지 역할만 하며, 30줄을 넘기지 않도록 한다",
            "error_handling": "API 호출 등 비동기 작업에는 반드시 try/catch 적용",
            "null_safety": "Optional chaining, default value, 타입 좁히기를 적극 사용"
          },
          "testing": {
            "framework": "Vitest 또는 Jest 사용",
            "scope": "UI 컴포넌트는 unit test, API 연동은 mock 기반 integration test 권장",
            "naming": "test file은 {ComponentName}.test.tsx 또는 .spec.ts로 명명"
          },
          "commit": {
            "message_format": "type(scope): message (예: feat(ui): Add RepositorySelector component)",
            "types": ["feat", "fix", "chore", "refactor", "test", "docs"]
          }
        }
      }
    ]
  }